/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.demo;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import com.example.demo.entities.Gender;
import com.example.demo.entities.VehicleType;
import com.example.demo.factory.IRideFactory;
import com.example.demo.factory.RideFactory;
import com.example.demo.repositories.IRideRepository;
import com.example.demo.repositories.IUserRepository;
import com.example.demo.repositories.IVehicleRepository;
import com.example.demo.repositories.RideRepository;
import com.example.demo.repositories.UserRepository;
import com.example.demo.repositories.VehicleRepository;
import com.example.demo.services.IRideService;
import com.example.demo.services.IUserService;
import com.example.demo.services.IVehicleService;
import com.example.demo.services.RideService;
import com.example.demo.services.UserService;
import com.example.demo.services.VehicleService;



public class App {

    //  Initialize repositories
    private final IUserRepository userRepository = new UserRepository();
    private final IVehicleRepository vehicleRepository = new VehicleRepository();
    private final IRideRepository rideRepository = new RideRepository();
    private final IRideFactory rideFactory = new RideFactory(rideRepository);

      // Initialize services
    private final IUserService userService = new UserService(userRepository);
    private final IVehicleService vehicleService = new VehicleService(userRepository, vehicleRepository);
    private final IRideService rideService = new RideService(userRepository, vehicleRepository, rideRepository, rideFactory);

    public static void main(String[] args) {
    
        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        // if (args.length == 1){
        //     List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
        //     String inputFile = commandLineArgs.get(0).split("=")[1];
        //     try {
        //         List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
        //         // Execute the commands
        //         new App().run(file_commands);
        //     } catch (IOException e) {
        //         e.printStackTrace();
        //     }
        //     return;
        // }        

        // OR
        // Test your code by ading commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
                add("ADD_USER,Rohan,M,36");
                add("ADD_VEHICLE,Rohan,Swift,KA-01-12345");
                add("ADD_USER,Shashank,M,29");
                add("ADD_VEHICLE,Shashank,Baleno,TS-05-62395");
                add("ADD_USER,Nandini,F,29");
                add("ADD_USER,Shipra,F,27");
                add("ADD_VEHICLE,Shipra,Polo,KA-05-41491");
                add("ADD_VEHICLE,Shipra,Activa,KA-12-12332");
                add("ADD_USER,Gaurav,M,29");
                add("ADD_USER,Rahul,M,35");
                add("ADD_VEHICLE,Rahul,XUV,KA-05-1234");
                add("OFFER_RIDE,Rohan,Hyderabad,1,Swift,KA-01-12345,Bangalore");
                add("OFFER_RIDE,Shipra,Bangalore,1,Activa,KA-12-12332,Mysore");
                add("OFFER_RIDE,Shipra,Bangalore,2,Polo,KA-05-41491,Mysore");
                add("OFFER_RIDE,Shashank,Hyderabad,2,Baleno,TS-05-62395,Bangalore");
                add("OFFER_RIDE,Rahul,Hyderabad,5,XUV,KA-05-1234,Bangalore");
                add("OFFER_RIDE,Rohan,Bangalore,1,Swift,KA-01-12345,Pune");
                add("SELECT_RIDE,Nandini,Bangalore,Mysore,1,Most Vacant");
                add("SELECT_RIDE,Gaurav,Bangalore,Mysore,1,Activa");
                add("SELECT_RIDE,Shashank,Mumbai,Bangalore,1,Most Vacant");
                add("SELECT_RIDE,Rohan,Hyderabad,Bangalore,1,Baleno");
                add("SELECT_RIDE,Shashank,Hyderabad,Bangalore,1,Polo");
                add("END_RIDE,2-a");
                add("END_RIDE,2-b");
                add("END_RIDE,2-c");
                add("END_RIDE,2-d");
                add("PRINT_RIDE_STATS");
            }
        };

        new App().run(inplace_commands);
 
     }

    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "ADD_USER":
                            ADD_USER(tokens);
                            break;
                        case "ADD_VEHICLE":
                            ADD_VEHICLE(tokens);
                            break;
                        case "OFFER_RIDE":
                            OFFER_RIDE(tokens);
                            break;
                        case "SELECT_RIDE":
                            SELECT_RIDE(tokens);
                            break;
                        case "END_RIDE":
                            END_RIDE(tokens);
                            break;
                        case "PRINT_RIDE_STATS":
                            PRINT_RIDE_STATS(tokens);
                            break;
                       
                        // Add More case statements below to support other commands
                       
                        default:
                        throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }


    // ADD_USER
    private void ADD_USER(List<String> tokens){
        String message = userService.add_user(tokens.get(1), 
            Gender.valueOf(tokens.get(2)),
            Long.parseLong(tokens.get(3)));
        System.out.println(message);
    }

    // ADD_VEHICLE
    private void ADD_VEHICLE(List<String> tokens){
        String message = vehicleService.add_vehicle(
            tokens.get(1), tokens.get(2), tokens.get(3));
        System.out.println(message);
    }

    // OFFER_RIDE
    private void OFFER_RIDE(List<String> tokens){
        String message = rideService.offer_ride(
            tokens.get(1), tokens.get(2),
            Long.parseLong(tokens.get(3)),
            tokens.get(4), tokens.get(5), tokens.get(6));
        System.out.println(message);
    }

    // SELECT_RIDE
    private void SELECT_RIDE(List<String> tokens){
        String message = rideService.select_ride(
            tokens.get(1), tokens.get(2),
            tokens.get(3),
            Long.parseLong(tokens.get(4)),
            tokens.get(5));
        System.out.println(message);
    }

    // END_RIDE
    private void  END_RIDE(List<String> tokens){
        String message = rideService.end_ride(tokens.get(1));
        System.out.println(message);
    }

   // GET_STATISCIS
    private void  PRINT_RIDE_STATS(List<String> tokens){
        String message = rideService.ride_stats();
        System.out.println(message);
    }

}
